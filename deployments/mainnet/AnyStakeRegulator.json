{
  "address": "0xbb10bC5a825F3F6b148bF83ED4b679c88ab27B54",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_points",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buybackRate",
          "type": "uint256"
        }
      ],
      "name": "BuybackRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "governance",
          "type": "address"
        }
      ],
      "name": "GovernanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Migrate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "migrator",
          "type": "address"
        }
      ],
      "name": "MigratorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "points",
          "type": "address"
        }
      ],
      "name": "PointsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PriceMultiplierUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "RegulatorActive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakingFee",
          "type": "uint256"
        }
      ],
      "name": "StakingFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenSweep",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TokenUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "weth",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "name": "UniswapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "VaultUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DeFiatPoints",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DeFiatPointsLp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DeFiatToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DeFiatTokenLp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "active",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buybackBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buybackRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAbovePeg",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isBlacklistedAdminWithdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRewardBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pending",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        }
      ],
      "name": "setActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_buybackRate",
          "type": "uint256"
        }
      ],
      "name": "setBuybackRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "name": "setGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_migrator",
          "type": "address"
        }
      ],
      "name": "setMigrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_points",
          "type": "address"
        }
      ],
      "name": "setPoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_priceMultiplier",
          "type": "uint256"
        }
      ],
      "name": "setPriceMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakingFee",
          "type": "uint256"
        }
      ],
      "name": "setStakingFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "setUniswap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5af995dcbe5ff7451102709a5a1ea82854323f046d19621274aefd79b9bc6cda",
  "receipt": {
    "to": null,
    "from": "0x4F4B49E7f3661652F13A6D2C86d9Af4435414721",
    "contractAddress": "0xbb10bC5a825F3F6b148bF83ED4b679c88ab27B54",
    "transactionIndex": 7,
    "gasUsed": "3579792",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000001000000000002000000000000000000000400000000000000000000000001000000000000000800000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000002000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000420000000000000000000000000020000000000000000000000000000000000000000",
    "blockHash": "0x002fb676845801ff544ebfb592241d819cb4d5a54d696ba5265ed504aa6f1b11",
    "transactionHash": "0x5af995dcbe5ff7451102709a5a1ea82854323f046d19621274aefd79b9bc6cda",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 12175589,
        "transactionHash": "0x5af995dcbe5ff7451102709a5a1ea82854323f046d19621274aefd79b9bc6cda",
        "address": "0xbb10bC5a825F3F6b148bF83ED4b679c88ab27B54",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004f4b49e7f3661652f13a6d2c86d9af4435414721"
        ],
        "data": "0x",
        "logIndex": 19,
        "blockHash": "0x002fb676845801ff544ebfb592241d819cb4d5a54d696ba5265ed504aa6f1b11"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 12175589,
        "transactionHash": "0x5af995dcbe5ff7451102709a5a1ea82854323f046d19621274aefd79b9bc6cda",
        "address": "0xbb10bC5a825F3F6b148bF83ED4b679c88ab27B54",
        "topics": [
          "0x434a2db650703b36c824e745330d6397cdaa9ee2cc891a4938ae853e1c50b68d",
          "0x0000000000000000000000004f4b49e7f3661652f13a6d2c86d9af4435414721"
        ],
        "data": "0x000000000000000000000000efccb112270c3c197b86ff03d26340d82a087f6c",
        "logIndex": 20,
        "blockHash": "0x002fb676845801ff544ebfb592241d819cb4d5a54d696ba5265ed504aa6f1b11"
      }
    ],
    "blockNumber": 12175589,
    "cumulativeGasUsed": "4023050",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
    "0xefcCb112270c3C197b86ff03D26340d82a087F6c",
    "0xDe3E18eCB613498b9a1483Af51394Ec2259BcD0a",
    "0xB6eE603933E024d8d53dDE3faa0bf98fE2a3d6f1"
  ],
  "solcInputHash": "b0d39a7d1d0391dd79e19d0cf1ad0a53",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_points\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buybackRate\",\"type\":\"uint256\"}],\"name\":\"BuybackRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"GovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"migrator\",\"type\":\"address\"}],\"name\":\"MigratorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"points\",\"type\":\"address\"}],\"name\":\"PointsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PriceMultiplierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"RegulatorActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingFee\",\"type\":\"uint256\"}],\"name\":\"StakingFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenSweep\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"UniswapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DeFiatPoints\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DeFiatPointsLp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DeFiatToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DeFiatTokenLp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAbovePeg\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isBlacklistedAdminWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buybackRate\",\"type\":\"uint256\"}],\"name\":\"setBuybackRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_points\",\"type\":\"address\"}],\"name\":\"setPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceMultiplier\",\"type\":\"uint256\"}],\"name\":\"setPriceMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingFee\",\"type\":\"uint256\"}],\"name\":\"setStakingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setUniswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/AnyStakeRegulator.sol\":\"AnyStakeRegulator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"contracts/AnyStakeRegulator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"./lib/@defiat-crypto/interfaces/IDeFiatPoints.sol\\\";\\r\\nimport \\\"./interfaces/IAnyStakeMigrator.sol\\\";\\r\\nimport \\\"./interfaces/IAnyStakeRegulator.sol\\\";\\r\\nimport \\\"./interfaces/IAnyStakeVault.sol\\\";\\r\\nimport \\\"./utils/AnyStakeUtils.sol\\\";\\r\\n\\r\\ncontract AnyStakeRegulator is IAnyStakeRegulator, AnyStakeUtils {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    event Initialized(address indexed user, address vault);\\r\\n    event Claim(address indexed user, uint256 amount);\\r\\n    event Deposit(address indexed user, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 amount);\\r\\n    event Migrate(address indexed user, uint256 amount);\\r\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\r\\n    event StakingFeeUpdated(address indexed user, uint256 stakingFee);\\r\\n    event BuybackRateUpdated(address indexed user, uint256 buybackRate);\\r\\n    event PriceMultiplierUpdated(address indexed user, uint256 amount);\\r\\n    event MigratorUpdated(address indexed user, address migrator);\\r\\n    event VaultUpdated(address indexed user, address vault);\\r\\n    event RegulatorActive(address indexed user, bool active);\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 amount;\\r\\n        uint256 rewardDebt;\\r\\n        uint256 lastRewardBlock;\\r\\n    }\\r\\n\\r\\n    mapping (address => UserInfo) public userInfo;\\r\\n    \\r\\n    address public migrator;\\r\\n    address public vault;\\r\\n\\r\\n    bool public active; // staking is active\\r\\n    bool public initialized; // contract has been initialized\\r\\n    uint256 public stakingFee; // fee taken on withdrawals\\r\\n    uint256 public priceMultiplier; // price peg control, DFT_PRICE = (DFTP_PRICE * priceMultiplier) / 1000\\r\\n    uint256 public lastRewardBlock; // last block that rewards were received\\r\\n    uint256 public buybackBalance; // total pending DFT awaiting stabilization\\r\\n    uint256 public buybackRate; // rate of rewards stockpiled for stabilization\\r\\n    uint256 public rewardsPerShare; // DFT rewards per DFTP, times 1e18 to prevent underflow\\r\\n    uint256 public pendingRewards; // total pending DFT rewards\\r\\n    uint256 public totalShares; // total staked shares\\r\\n\\r\\n    modifier NoReentrant(address user) {\\r\\n        require(\\r\\n            block.number > userInfo[user].lastRewardBlock,\\r\\n            \\\"Regulator: Must wait 1 block\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyVault() {\\r\\n        require(msg.sender == vault, \\\"AnyStake: Only Vault allowed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier activated() {\\r\\n        require(initialized, \\\"Regulator: Not initialized yet\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _router, address _gov, address _points, address _token) \\r\\n        public \\r\\n        AnyStakeUtils(_router, _gov, _points, _token)\\r\\n    {\\r\\n        priceMultiplier = 10000; // 10000 / 1000 = 10:1\\r\\n        stakingFee = 100; // 10%\\r\\n        buybackRate = 300; // 30%\\r\\n    }\\r\\n\\r\\n    function initialize(address _vault) external onlyGovernor {\\r\\n        require(_vault != address(0), \\\"Initialize: Must pass in Vault\\\");\\r\\n        require(!initialized, \\\"Initialize: Regulator already initialized\\\");\\r\\n\\r\\n        vault = _vault;\\r\\n        active = true;\\r\\n        initialized = true;\\r\\n        emit Initialized(msg.sender, vault);\\r\\n    }\\r\\n\\r\\n    function stabilize(uint256 amount) internal {\\r\\n        if (isAbovePeg()) {\\r\\n            // Above Peg: sell DFTP, buy DFT, add to rewards\\r\\n\\r\\n            IERC20(DeFiatPoints).transfer(vault, amount);\\r\\n            IAnyStakeVault(vault).buyDeFiatWithTokens(DeFiatPoints, amount);\\r\\n        } else {\\r\\n            // Below Peg: sell DFT, buy DFTP, burn all proceeds (deflationary)\\r\\n\\r\\n            IAnyStakeVault(vault).buyPointsWithTokens(DeFiatToken, buybackBalance);\\r\\n            IDeFiatPoints(DeFiatPoints).burn(amount);\\r\\n            IDeFiatPoints(DeFiatPoints).overrideLoyaltyPoints(vault, 0);\\r\\n            buybackBalance = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Pool - Add rewards\\r\\n    function addReward(uint256 amount) external override onlyVault {\\r\\n        if (amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 buybackAmount = amount.mul(buybackRate).div(1000);\\r\\n        uint256 rewardAmount = amount.sub(buybackAmount);\\r\\n\\r\\n        if (buybackAmount > 0) {\\r\\n            buybackBalance = buybackBalance.add(buybackAmount);\\r\\n        }\\r\\n\\r\\n        if (rewardAmount > 0) {\\r\\n            pendingRewards = pendingRewards.add(rewardAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Pool - Update pool rewards, pull from Vault\\r\\n    function updatePool() external override {\\r\\n        _updatePool();\\r\\n    }\\r\\n\\r\\n    // Pool - Update pool internal\\r\\n    function _updatePool() internal {\\r\\n        if (totalShares == 0 || block.number <= lastRewardBlock || !active) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // calculate rewards, calls addReward()\\r\\n        IAnyStakeVault(vault).calculateRewards();\\r\\n\\r\\n        // update rewardsPerShare            \\r\\n        rewardsPerShare = rewardsPerShare.add(pendingRewards.mul(1e18).div(totalShares));\\r\\n        lastRewardBlock = block.number;\\r\\n        pendingRewards = 0;\\r\\n    }\\r\\n\\r\\n    function claim() external override activated NoReentrant(msg.sender) {\\r\\n        _updatePool();\\r\\n        _claim(msg.sender);\\r\\n    }\\r\\n\\r\\n    // Pool - Claim internal\\r\\n    function _claim(address _user) internal {\\r\\n        // get pending rewards\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        uint256 rewards = pending(_user);\\r\\n        if (rewards == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // update pool / user metrics\\r\\n        user.rewardDebt = user.amount.mul(rewardsPerShare).div(1e18);\\r\\n        user.lastRewardBlock = block.number;\\r\\n        \\r\\n        // transfer\\r\\n        IAnyStakeVault(vault).distributeRewards(_user, rewards);\\r\\n        emit Claim(_user, rewards);\\r\\n    }\\r\\n\\r\\n    // Pool - Deposit DeFiat Points (DFTP) to earn DFT and stablize token prices\\r\\n    function deposit(uint256 amount) external override activated NoReentrant(msg.sender) {\\r\\n        _updatePool();\\r\\n        _deposit(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    // Pool - deposit internal, perform the stablization\\r\\n    function _deposit(address _user, uint256 _amount) internal {\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        require(_amount > 0, \\\"Deposit: Cannot deposit zero tokens\\\");\\r\\n\\r\\n        _claim(_user);\\r\\n\\r\\n        // update pool / user metrics\\r\\n        totalShares = totalShares.add(_amount);\\r\\n        user.amount = user.amount.add(_amount);\\r\\n        user.rewardDebt = user.amount.mul(rewardsPerShare).div(1e18);\\r\\n\\r\\n        IERC20(DeFiatPoints).transferFrom(_user, address(this), _amount);\\r\\n        emit Deposit(_user, _amount);\\r\\n    }\\r\\n\\r\\n    // Pool - Withdraw function, currently unused\\r\\n    function withdraw(uint256 amount) external override NoReentrant(msg.sender) {\\r\\n        _updatePool();\\r\\n        _withdraw(msg.sender, amount); // internal, unused\\r\\n    }\\r\\n\\r\\n    // Pool - Withdraw internal, unused\\r\\n    function _withdraw(address _user, uint256 _amount) internal {\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        require(_amount <= user.amount, \\\"Withdraw: Not enough staked\\\");\\r\\n\\r\\n        _claim(_user);\\r\\n\\r\\n        uint256 feeAmount = _amount.mul(stakingFee).div(1000);\\r\\n        uint256 remainingUserAmount = _amount.sub(feeAmount);\\r\\n\\r\\n        if (feeAmount > 0) {\\r\\n            stabilize(feeAmount);\\r\\n        }\\r\\n\\r\\n        totalShares = totalShares.sub(_amount);\\r\\n        user.amount = user.amount.sub(_amount);\\r\\n        user.rewardDebt = user.amount.mul(rewardsPerShare).div(1e18);\\r\\n\\r\\n        IERC20(DeFiatPoints).transfer(_user, remainingUserAmount);\\r\\n        emit Withdraw(_user, remainingUserAmount);\\r\\n    }\\r\\n\\r\\n    function migrate() external override NoReentrant(msg.sender) {\\r\\n        _updatePool();\\r\\n        _migrate(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _migrate(address _user) internal {\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        uint256 balance = user.amount;\\r\\n\\r\\n        require(migrator != address(0), \\\"Migrate: No migrator set\\\");\\r\\n        require(balance > 0, \\\"Migrate: No tokens to migrate\\\");\\r\\n\\r\\n        IERC20(DeFiatPoints).approve(migrator, balance);\\r\\n        IAnyStakeMigrator(migrator).migrateTo(_user, DeFiatPoints, balance);\\r\\n        emit Migrate(_user, balance);\\r\\n    }\\r\\n\\r\\n    // Emergency withdraw all basis, burn the staking fee\\r\\n    function emergencyWithdraw() external NoReentrant(msg.sender) {\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n\\r\\n        require(user.amount > 0, \\\"EmergencyWithdraw: user amount insufficient\\\");\\r\\n\\r\\n        uint256 feeAmount = user.amount.mul(stakingFee).div(1000);\\r\\n        uint256 remainingUserAmount = user.amount.sub(feeAmount);\\r\\n        totalShares = totalShares.sub(user.amount);\\r\\n        user.amount = 0;\\r\\n        user.rewardDebt = 0;\\r\\n        user.lastRewardBlock = block.number;\\r\\n\\r\\n        IDeFiatPoints(DeFiatPoints).burn(feeAmount);\\r\\n        safeTokenTransfer(msg.sender, DeFiatPoints, remainingUserAmount);\\r\\n        emit EmergencyWithdraw(msg.sender, remainingUserAmount);\\r\\n    }\\r\\n\\r\\n    function isAbovePeg() public view returns (bool) {\\r\\n        uint256 tokenPrice = IAnyStakeVault(vault).getTokenPrice(DeFiatToken, DeFiatTokenLp);\\r\\n        uint256 pointsPrice = IAnyStakeVault(vault).getTokenPrice(DeFiatPoints, DeFiatPointsLp);\\r\\n        \\r\\n        return pointsPrice.mul(priceMultiplier).div(1000) > tokenPrice;\\r\\n    }\\r\\n\\r\\n    // View - Pending DFT Rewards for user in pool\\r\\n    function pending(address _user)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        UserInfo memory user = userInfo[_user];\\r\\n        return user.amount.mul(rewardsPerShare).div(1e18).sub(user.rewardDebt);\\r\\n    }\\r\\n\\r\\n\\r\\n    // Governance - Set Staking Fee\\r\\n    function setStakingFee(uint256 _stakingFee) external onlyGovernor {\\r\\n        require(_stakingFee != stakingFee, \\\"SetFee: No fee change\\\");\\r\\n        require(_stakingFee <= 1000, \\\"SetFee: Fee cannot exceed 100%\\\");\\r\\n\\r\\n        stakingFee = _stakingFee;\\r\\n        emit StakingFeeUpdated(msg.sender, stakingFee);\\r\\n    }\\r\\n\\r\\n    // Governance - Set Buyback Rate\\r\\n    function setBuybackRate(uint256 _buybackRate) external onlyGovernor {\\r\\n        require(_buybackRate != buybackRate, \\\"SetBuybackRate: No rate change\\\");\\r\\n        require(_buybackRate <= 1000, \\\"SetBuybackRate: Cannot exceed 100%\\\");\\r\\n\\r\\n        buybackRate = _buybackRate;\\r\\n        emit BuybackRateUpdated(msg.sender, buybackRate);\\r\\n    }\\r\\n\\r\\n    // Governance - Set DeFiat Points price multiplier\\r\\n    function setPriceMultiplier(uint256 _priceMultiplier) external onlyGovernor {\\r\\n        require(_priceMultiplier != priceMultiplier, \\\"SetMultiplier: No multiplier change\\\");\\r\\n        require(_priceMultiplier > 0, \\\"SetMultiplier: Must be greater than zero\\\");\\r\\n\\r\\n        priceMultiplier = _priceMultiplier;\\r\\n        emit PriceMultiplierUpdated(msg.sender, priceMultiplier);\\r\\n    }\\r\\n\\r\\n    // Governance - Set Migrator\\r\\n    function setMigrator(address _migrator) external onlyGovernor {\\r\\n        require(_migrator != address(0), \\\"SetMigrator: No migrator change\\\");\\r\\n\\r\\n        migrator = _migrator;\\r\\n        emit MigratorUpdated(msg.sender, _migrator);\\r\\n    }\\r\\n    \\r\\n    // Governance - Set Vault\\r\\n    function setVault(address _vault) external onlyGovernor {\\r\\n        require(_vault != address(0), \\\"SetVault: No migrator change\\\");\\r\\n\\r\\n        vault = _vault;\\r\\n        emit VaultUpdated(msg.sender, vault);\\r\\n    }\\r\\n\\r\\n    // Governance - Set Pool Deposits active\\r\\n    function setActive(bool _active) external onlyGovernor {\\r\\n        require(_active != active, \\\"SetActive: No active change\\\");\\r\\n        \\r\\n        active = _active;\\r\\n        emit RegulatorActive(msg.sender, active);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x8808ef458071503271831baeafeb30b5e68c22db585e81c0ff8e93294f02f853\"},\"contracts/interfaces/IAnyStakeMigrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n\\r\\npragma solidity 0.6.6;\\r\\n\\r\\ninterface IAnyStakeMigrator {\\r\\n    function migrateTo(address user, address token, uint256 amount) external;\\r\\n}\",\"keccak256\":\"0xa76f467fa4d00c317b149cfe96e7a35077e87796dd6853a0cb671d1652e6a3bd\"},\"contracts/interfaces/IAnyStakeRegulator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.6;\\r\\n\\r\\ninterface IAnyStakeRegulator {\\r\\n    function addReward(uint256 amount) external;\\r\\n    function claim() external;\\r\\n    function deposit(uint256 amount) external;\\r\\n    function withdraw(uint256 amount) external;\\r\\n    function migrate() external;\\r\\n    function updatePool() external;\\r\\n}\",\"keccak256\":\"0x051d05e61f240deaa19febb530251c0188eb8a5a6bf6d153331f21b2ba5c5268\"},\"contracts/interfaces/IAnyStakeVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.6;\\r\\n\\r\\ninterface IAnyStakeVault {\\r\\n    function buyDeFiatWithTokens(address token, uint256 amount) external;\\r\\n    function buyPointsWithTokens(address token, uint256 amount) external;\\r\\n\\r\\n    function calculateRewards() external;\\r\\n    function distributeRewards(address recipient, uint256 amount) external;\\r\\n    function getTokenPrice(address token, address lpToken) external view returns (uint256);\\r\\n}\",\"keccak256\":\"0x1e585f6f27ef3b42f7f12d711b9d78af700db7248ab6390bc80df1e48451d930\"},\"contracts/lib/@defiat-crypto/interfaces/IDeFiatGov.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.6;\\r\\n\\r\\ninterface IDeFiatGov {\\r\\n    function mastermind() external view returns (address);\\r\\n    function viewActorLevelOf(address _address) external view returns (uint256);\\r\\n    function viewFeeDestination() external view returns (address);\\r\\n    function viewTxThreshold() external view returns (uint256);\\r\\n    function viewBurnRate() external view returns (uint256);\\r\\n    function viewFeeRate() external view returns (uint256);\\r\\n}\",\"keccak256\":\"0xc1b0150b388594345e6a4ae8a3aae5604590469c77e2135a9c21f67c2ffae0aa\"},\"contracts/lib/@defiat-crypto/interfaces/IDeFiatPoints.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.6;\\r\\n\\r\\ninterface IDeFiatPoints {\\r\\n    function viewDiscountOf(address _address) external view returns (uint256);\\r\\n    function viewEligibilityOf(address _address) external view returns (uint256 tranche);\\r\\n    function discountPointsNeeded(uint256 _tranche) external view returns (uint256 pointsNeeded);\\r\\n    function viewTxThreshold() external view returns (uint256);\\r\\n    function viewRedirection(address _address) external view returns (bool);\\r\\n\\r\\n    function overrideLoyaltyPoints(address _address, uint256 _points) external;\\r\\n    function addPoints(address _address, uint256 _txSize, uint256 _points) external;\\r\\n    function burn(uint256 _amount) external;\\r\\n}\",\"keccak256\":\"0x0d77e201eba7a9a02cea22e6525cd913edb0b1fee4891916d2ee18891b0344cd\"},\"contracts/lib/@defiat-crypto/utils/DeFiatGovernedUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"./DeFiatUtils.sol\\\";\\r\\nimport \\\"../interfaces/IDeFiatGov.sol\\\";\\r\\n\\r\\nabstract contract DeFiatGovernedUtils is DeFiatUtils {\\r\\n    event GovernanceUpdated(address indexed user, address governance);\\r\\n\\r\\n    address public governance;\\r\\n\\r\\n    modifier onlyMastermind {\\r\\n        require(\\r\\n            msg.sender == IDeFiatGov(governance).mastermind() || msg.sender == owner(),\\r\\n            \\\"Gov: Only Mastermind\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGovernor {\\r\\n        require(\\r\\n            IDeFiatGov(governance).viewActorLevelOf(msg.sender) >= 2 || msg.sender == owner(),\\r\\n            \\\"Gov: Only Governors\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPartner {\\r\\n        require(\\r\\n            IDeFiatGov(governance).viewActorLevelOf(msg.sender) >= 1 || msg.sender == owner(),\\r\\n            \\\"Gov: Only Partners\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _setGovernance(address _governance) internal {\\r\\n        require(_governance != governance, \\\"SetGovernance: No governance change\\\");\\r\\n\\r\\n        governance = _governance;\\r\\n        emit GovernanceUpdated(msg.sender, governance);\\r\\n    }\\r\\n\\r\\n    function setGovernance(address _governance) external onlyGovernor {\\r\\n        _setGovernance(_governance);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x4b9a859500a209f52efe61d59ac6f641e2bd33d266c2c591a85d669520b1cbcd\"},\"contracts/lib/@defiat-crypto/utils/DeFiatUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"../../@openzeppelin/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../../@openzeppelin/access/Ownable.sol\\\";\\r\\n\\r\\nabstract contract DeFiatUtils is Ownable {\\r\\n    event TokenSweep(address indexed user, address indexed token, uint256 amount);\\r\\n\\r\\n    // Sweep any tokens/ETH accidentally sent or airdropped to the contract\\r\\n    function sweep(address token) public virtual onlyOwner {\\r\\n        uint256 amount = IERC20(token).balanceOf(address(this));\\r\\n        require(amount > 0, \\\"Sweep: No token balance\\\");\\r\\n\\r\\n        IERC20(token).transfer(msg.sender, amount); // use of the ERC20 traditional transfer\\r\\n\\r\\n        if (address(this).balance > 0) {\\r\\n            payable(msg.sender).transfer(address(this).balance);\\r\\n        }\\r\\n\\r\\n        emit TokenSweep(msg.sender, token, amount);\\r\\n    }\\r\\n\\r\\n    // Self-Destruct contract to free space on-chain, sweep any ETH to owner\\r\\n    function kill() external onlyOwner {\\r\\n        selfdestruct(payable(msg.sender));\\r\\n    }\\r\\n}\",\"keccak256\":\"0x442c30bc18cf99893d6ad9fd0c0431d22a33f221e82e00d83a98178b53871751\"},\"contracts/lib/@openzeppelin/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport \\\"../utils/Context.sol\\\";\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor () internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xf5680940d881f96f6517e8a3be14c061e1e04b31dba60bb4f9d7eb307912decd\"},\"contracts/lib/@openzeppelin/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x9a028be326fdef37870429a7605381fd0121309a329b1b022c3ddd32937a6405\"},\"contracts/lib/@openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    // Standard\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\",\"keccak256\":\"0xb6da31dc31ae7de4cb63f33a84a852f2253794cc68940570ac6ab918a30e0d4d\"},\"contracts/lib/@openzeppelin/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"../../math/SafeMath.sol\\\";\\r\\nimport \\\"../../utils/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x50834726ef9e9855da4dcef99303139e5c730e46448eeb56a40f9eb22396dea7\"},\"contracts/lib/@openzeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9bb2def599742676e174be012a0259ab14bf9990c7a6a41bf61edcd6864d88c2\"},\"contracts/lib/@openzeppelin/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xa1c8840b5f3767cdd6f3ae92ad5800d0a3578dc27bee9da0204f34c5ae7e89f7\"},\"contracts/lib/@uniswap/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xa82d644ca51383c737963d7f11ca0ee1a0e8e77a14306ef3fe215e125dc3b880\"},\"contracts/lib/@uniswap/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0xb0f0a9e1bfa3a5f66128964038451692ed3683dc741f43262d9bd8b791b8ea64\"},\"contracts/lib/@uniswap/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6a5985605b2462d3bc99a92de2843c236ceeeae09cf77c8b9b89ef0b28dc36e6\"},\"contracts/utils/AnyStakeUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.6;\\r\\n\\r\\nimport \\\"../lib/@defiat-crypto/utils/DeFiatUtils.sol\\\";\\r\\nimport \\\"../lib/@defiat-crypto/utils/DeFiatGovernedUtils.sol\\\";\\r\\nimport \\\"../lib/@openzeppelin/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"../lib/@uniswap/interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"../lib/@uniswap/interfaces/IUniswapV2Router02.sol\\\";\\r\\n\\r\\nabstract contract AnyStakeUtils is DeFiatGovernedUtils {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    event PointsUpdated(address indexed user, address points);\\r\\n    event TokenUpdated(address indexed user, address token);\\r\\n    event UniswapUpdated(address indexed user, address router, address weth, address factory);\\r\\n  \\r\\n    address public router;\\r\\n    address public factory;\\r\\n    address public weth;\\r\\n    address public DeFiatToken;\\r\\n    address public DeFiatPoints;\\r\\n    address public DeFiatTokenLp;\\r\\n    address public DeFiatPointsLp;\\r\\n\\r\\n    mapping (address => bool) internal _blacklistedAdminWithdraw;\\r\\n\\r\\n    constructor(address _router, address _gov, address _points, address _token) public {\\r\\n        _setGovernance(_gov);\\r\\n\\r\\n        router = _router;\\r\\n        DeFiatPoints = _points;\\r\\n        DeFiatToken = _token;\\r\\n         \\r\\n        weth = IUniswapV2Router02(router).WETH();\\r\\n        factory = IUniswapV2Router02(router).factory();\\r\\n        DeFiatTokenLp = IUniswapV2Factory(factory).getPair(_token, weth);\\r\\n        DeFiatPointsLp = IUniswapV2Factory(factory).getPair(_points, weth);\\r\\n    }\\r\\n\\r\\n    function sweep(address _token) public override onlyOwner {\\r\\n        require(!_blacklistedAdminWithdraw[_token], \\\"Sweep: Cannot withdraw blacklisted token\\\");\\r\\n\\r\\n        DeFiatUtils.sweep(_token);\\r\\n    }\\r\\n\\r\\n    function isBlacklistedAdminWithdraw(address _token)\\r\\n        external\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _blacklistedAdminWithdraw[_token];\\r\\n    }\\r\\n\\r\\n    // Method to avoid underflow on token transfers\\r\\n    function safeTokenTransfer(address user, address token, uint256 amount) internal {\\r\\n        if (amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 tokenBalance = IERC20(token).balanceOf(address(this));\\r\\n        if (amount > tokenBalance) {\\r\\n            IERC20(token).safeTransfer(user, tokenBalance);\\r\\n        } else {\\r\\n            IERC20(token).safeTransfer(user, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setToken(address _token) external onlyGovernor {\\r\\n        require(_token != DeFiatToken, \\\"SetToken: No token change\\\");\\r\\n        require(_token != address(0), \\\"SetToken: Must set token value\\\");\\r\\n\\r\\n        DeFiatToken = _token;\\r\\n        DeFiatTokenLp = IUniswapV2Factory(factory).getPair(_token, weth);\\r\\n        emit TokenUpdated(msg.sender, DeFiatToken);\\r\\n    }\\r\\n\\r\\n    function setPoints(address _points) external onlyGovernor {\\r\\n        require(_points != DeFiatPoints, \\\"SetPoints: No points change\\\");\\r\\n        require(_points != address(0), \\\"SetPoints: Must set points value\\\");\\r\\n\\r\\n        DeFiatPoints = _points;\\r\\n        DeFiatPointsLp = IUniswapV2Factory(factory).getPair(_points, weth);\\r\\n        emit PointsUpdated(msg.sender, DeFiatPoints);\\r\\n    }\\r\\n\\r\\n    function setUniswap(address _router) external onlyGovernor {\\r\\n        require(_router != router, \\\"SetUniswap: No uniswap change\\\");\\r\\n        require(_router != address(0), \\\"SetUniswap: Must set uniswap value\\\");\\r\\n\\r\\n        router = _router;\\r\\n        weth = IUniswapV2Router02(router).WETH();\\r\\n        factory = IUniswapV2Router02(router).factory();\\r\\n        emit UniswapUpdated(msg.sender, router, weth, factory);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xf0cb6c837e03a2f93ac6e5028483cbcdbbcf611b65c76c0fdb33b208276d7546\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003efc38038062003efc833981810160405260808110156200003757600080fd5b5080516020820151604083015160609093015191929091838383836000620000676001600160e01b036200036b16565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350620000c5836001600160e01b036200036f16565b600280546001600160a01b038087166001600160a01b031992831617928390556006805486831690841617905560058054858316931692909217909155604080516315ab88c960e31b81529051929091169163ad5c464891600480820192602092909190829003018186803b1580156200013e57600080fd5b505afa15801562000153573d6000803e3d6000fd5b505050506040513d60208110156200016a57600080fd5b5051600480546001600160a01b0319166001600160a01b039283161781556002546040805163c45a015560e01b81529051919093169263c45a01559281810192602092909190829003018186803b158015620001c557600080fd5b505afa158015620001da573d6000803e3d6000fd5b505050506040513d6020811015620001f157600080fd5b5051600380546001600160a01b0319166001600160a01b039283161790819055600480546040805163e6a4390560e01b815286861693810193909352908416602483015251919092169163e6a43905916044808301926020929190829003018186803b1580156200026157600080fd5b505afa15801562000276573d6000803e3d6000fd5b505050506040513d60208110156200028d57600080fd5b5051600780546001600160a01b0319166001600160a01b03928316179055600354600480546040805163e6a4390560e01b815287861693810193909352908416602483015251919092169163e6a43905916044808301926020929190829003018186803b158015620002fe57600080fd5b505afa15801562000313573d6000803e3d6000fd5b505050506040513d60208110156200032a57600080fd5b5051600880546001600160a01b0319166001600160a01b039092169190911790555050612710600e5550506064600d55505061012c601155506200041c9050565b3390565b6001546001600160a01b0382811691161415620003be5760405162461bcd60e51b815260040180806020018281038252602381526020018062003ed96023913960400191505060405180910390fd5b600180546001600160a01b038084166001600160a01b03199092169190911791829055604080519290911682525133917f434a2db650703b36c824e745330d6397cdaa9ee2cc891a4938ae853e1c50b68d919081900360200190a250565b613aad806200042c6000396000f3fe608060405234801561001057600080fd5b50600436106102955760003560e01c80637cd07e4711610167578063c4d66de8116100ce578063eff9884311610087578063eff9884314610623578063f2fde38b1461062b578063f76024c414610651578063f887ea4014610659578063fbfa77cf14610661578063fdcc7b081461066957610295565b8063c4d66de8146105d5578063c7e1d0b1146105fb578063d50cb88b14610603578063db2e21bc1461060b578063e3161ddd14610613578063eded3fda1461061b57610295565b8063a8b51fc811610120578063a8b51fc81461055b578063a9f8d18114610563578063ab033ea91461056b578063acec338a14610591578063b6b55f25146105b0578063c45a0155146105cd57610295565b80637cd07e47146104ef5780638da5cb5b146104f75780638efecdda146104ff5780638fd3ab8014610525578063917f97371461052d5780639f25cde71461053557610295565b80633a98ef391161020b5780635aa6e675116101c45780635aa6e675146104595780635eebea20146104615780636817031b146104875780636e10f476146104ad578063715018a6146104ca57806374de4ec4146104d257610295565b80633a98ef39146104025780633fc8cef31461041c578063410dbf7e1461042457806341c0e1b514610441578063463d7ac3146104495780634e71d92d1461045157610295565b80631959a0021161025d5780631959a002146103145780632081c4ea1461035857806321603e8b1461037557806323cf31181461039b5780632e1a7d4d146103c157806337710aca146103de57610295565b806301681a621461029a57806301e3b4df146102c257806302fb0c5e146102de578063144fa6d7146102e6578063158ef93e1461030c575b600080fd5b6102c0600480360360208110156102b057600080fd5b50356001600160a01b0316610671565b005b6102ca61072d565b604080519115158252519081900360200190f35b6102ca610876565b6102c0600480360360208110156102fc57600080fd5b50356001600160a01b0316610886565b6102ca610b15565b61033a6004803603602081101561032a57600080fd5b50356001600160a01b0316610b25565b60408051938452602084019290925282820152519081900360600190f35b6102c06004803603602081101561036e57600080fd5b5035610b46565b6102ca6004803603602081101561038b57600080fd5b50356001600160a01b0316610cdf565b6102c0600480360360208110156103b157600080fd5b50356001600160a01b0316610cfd565b6102c0600480360360208110156103d757600080fd5b5035610e8a565b6103e6610ef4565b604080516001600160a01b039092168252519081900360200190f35b61040a610f03565b60408051918252519081900360200190f35b6103e6610f09565b6102c06004803603602081101561043a57600080fd5b5035610f18565b6102c06110d7565b6103e6611132565b6102c0611141565b6103e6611204565b61040a6004803603602081101561047757600080fd5b50356001600160a01b0316611213565b6102c06004803603602081101561049d57600080fd5b50356001600160a01b0316611297565b6102c0600480360360208110156104c357600080fd5b503561142b565b6102c06115dc565b6102c0600480360360208110156104e857600080fd5b503561167e565b6103e6611759565b6103e6611768565b6102c06004803603602081101561051557600080fd5b50356001600160a01b0316611777565b6102c0611a76565b6103e6611adb565b6102c06004803603602081101561054b57600080fd5b50356001600160a01b0316611aea565b61040a611d79565b61040a611d7f565b6102c06004803603602081101561058157600080fd5b50356001600160a01b0316611d85565b6102c0600480360360208110156105a757600080fd5b50351515611e69565b6102c0600480360360208110156105c657600080fd5b503561200d565b6103e66120d1565b6102c0600480360360208110156105eb57600080fd5b50356001600160a01b03166120e0565b61040a6122d7565b61040a6122dd565b6102c06122e3565b6102c061249c565b61040a6124a6565b61040a6124ac565b6102c06004803603602081101561064157600080fd5b50356001600160a01b03166124b2565b61040a6125aa565b6103e66125b0565b6103e66125bf565b6103e66125ce565b6106796125dd565b6000546001600160a01b039081169116146106c9576040805162461bcd60e51b81526020600482018190526024820152600080516020613979833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526009602052604090205460ff16156107215760405162461bcd60e51b81526004018080602001828103825260288152602001806139bc6028913960400191505060405180910390fd5b61072a816125e1565b50565b600c546005546007546040805163057d4cc360e51b81526001600160a01b0393841660048201529183166024830152516000938493169163afa99860916044808301926020929190829003018186803b15801561078957600080fd5b505afa15801561079d573d6000803e3d6000fd5b505050506040513d60208110156107b357600080fd5b5051600c546006546008546040805163057d4cc360e51b81526001600160a01b039384166004820152918316602483015251939450600093919092169163afa99860916044808301926020929190829003018186803b15801561081557600080fd5b505afa158015610829573d6000803e3d6000fd5b505050506040513d602081101561083f57600080fd5b5051600e54909150829061086e906103e89061086290859063ffffffff6127f016565b9063ffffffff61285216565b119250505090565b600c54600160a01b900460ff1681565b60015460408051630f9e0f3360e31b815233600482015290516002926001600160a01b031691637cf07998916024808301926020929190829003018186803b1580156108d157600080fd5b505afa1580156108e5573d6000803e3d6000fd5b505050506040513d60208110156108fb57600080fd5b5051101580610922575061090d611768565b6001600160a01b0316336001600160a01b0316145b610961576040805162461bcd60e51b81526020600482015260136024820152600080516020613a58833981519152604482015290519081900360640190fd5b6005546001600160a01b03828116911614156109c4576040805162461bcd60e51b815260206004820152601960248201527f536574546f6b656e3a204e6f20746f6b656e206368616e676500000000000000604482015290519081900360640190fd5b6001600160a01b038116610a1f576040805162461bcd60e51b815260206004820152601e60248201527f536574546f6b656e3a204d7573742073657420746f6b656e2076616c75650000604482015290519081900360640190fd5b600580546001600160a01b0319166001600160a01b03838116918217909255600354600480546040805163e6a4390560e01b81529283019490945284166024820152915192169163e6a4390591604480820192602092909190829003018186803b158015610a8c57600080fd5b505afa158015610aa0573d6000803e3d6000fd5b505050506040513d6020811015610ab657600080fd5b5051600780546001600160a01b039283166001600160a01b031990911617905560055460408051919092168152905133917f0b1186973f810894b87ab0bfbee422fddcaad21b46dc705a561451bbb6bac117919081900360200190a250565b600c54600160a81b900460ff1681565b600a6020526000908152604090208054600182015460029092015490919083565b60015460408051630f9e0f3360e31b815233600482015290516002926001600160a01b031691637cf07998916024808301926020929190829003018186803b158015610b9157600080fd5b505afa158015610ba5573d6000803e3d6000fd5b505050506040513d6020811015610bbb57600080fd5b5051101580610be25750610bcd611768565b6001600160a01b0316336001600160a01b0316145b610c21576040805162461bcd60e51b81526020600482015260136024820152600080516020613a58833981519152604482015290519081900360640190fd5b600e54811415610c625760405162461bcd60e51b81526004018080602001828103825260238152602001806139996023913960400191505060405180910390fd5b60008111610ca15760405162461bcd60e51b8152600401808060200182810382526028815260200180613a306028913960400191505060405180910390fd5b600e81905560408051828152905133917fbbc6ccf73c005acc6dc271f74cfc898ad65d464c3b6f2cebc6d1ef9fd51ff44a919081900360200190a250565b6001600160a01b031660009081526009602052604090205460ff1690565b60015460408051630f9e0f3360e31b815233600482015290516002926001600160a01b031691637cf07998916024808301926020929190829003018186803b158015610d4857600080fd5b505afa158015610d5c573d6000803e3d6000fd5b505050506040513d6020811015610d7257600080fd5b5051101580610d995750610d84611768565b6001600160a01b0316336001600160a01b0316145b610dd8576040805162461bcd60e51b81526020600482015260136024820152600080516020613a58833981519152604482015290519081900360640190fd5b6001600160a01b038116610e33576040805162461bcd60e51b815260206004820152601f60248201527f5365744d69677261746f723a204e6f206d69677261746f72206368616e676500604482015290519081900360640190fd5b600b80546001600160a01b0383166001600160a01b03199091168117909155604080519182525133917f17356f011fa307735bd27bcbcd4ee385789d5155c6e44c093a1936e387f62ae5919081900360200190a250565b336000818152600a60205260409020600201544311610ede576040805162461bcd60e51b815260206004820152601c6024820152600080516020613830833981519152604482015290519081900360640190fd5b610ee6612894565b610ef0338361296f565b5050565b6005546001600160a01b031681565b60145481565b6004546001600160a01b031681565b60015460408051630f9e0f3360e31b815233600482015290516002926001600160a01b031691637cf07998916024808301926020929190829003018186803b158015610f6357600080fd5b505afa158015610f77573d6000803e3d6000fd5b505050506040513d6020811015610f8d57600080fd5b5051101580610fb45750610f9f611768565b6001600160a01b0316336001600160a01b0316145b610ff3576040805162461bcd60e51b81526020600482015260136024820152600080516020613a58833981519152604482015290519081900360640190fd5b600d54811415611042576040805162461bcd60e51b81526020600482015260156024820152745365744665653a204e6f20666565206368616e676560581b604482015290519081900360640190fd5b6103e8811115611099576040805162461bcd60e51b815260206004820152601e60248201527f5365744665653a204665652063616e6e6f742065786365656420313030250000604482015290519081900360640190fd5b600d81905560408051828152905133917fa0f94b43ca87c9f1f3e8dcf3e8291bd5f163cdfafd57bfbc7e054dc910155fad919081900360200190a250565b6110df6125dd565b6000546001600160a01b0390811691161461112f576040805162461bcd60e51b81526020600482018190526024820152600080516020613979833981519152604482015290519081900360640190fd5b33ff5b6008546001600160a01b031681565b600c54600160a81b900460ff1661119f576040805162461bcd60e51b815260206004820152601e60248201527f526567756c61746f723a204e6f7420696e697469616c697a6564207965740000604482015290519081900360640190fd5b336000818152600a602052604090206002015443116111f3576040805162461bcd60e51b815260206004820152601c6024820152600080516020613830833981519152604482015290519081900360640190fd5b6111fb612894565b61072a33612b41565b6001546001600160a01b031681565b600061121d61380e565b506001600160a01b0382166000908152600a602090815260409182902082516060810184528154808252600183015493820184905260029092015493810193909352601254611290929161128491670de0b6b3a7640000916108629163ffffffff6127f016565b9063ffffffff612c4f16565b9392505050565b60015460408051630f9e0f3360e31b815233600482015290516002926001600160a01b031691637cf07998916024808301926020929190829003018186803b1580156112e257600080fd5b505afa1580156112f6573d6000803e3d6000fd5b505050506040513d602081101561130c57600080fd5b5051101580611333575061131e611768565b6001600160a01b0316336001600160a01b0316145b611372576040805162461bcd60e51b81526020600482015260136024820152600080516020613a58833981519152604482015290519081900360640190fd5b6001600160a01b0381166113cd576040805162461bcd60e51b815260206004820152601c60248201527f5365745661756c743a204e6f206d69677261746f72206368616e676500000000604482015290519081900360640190fd5b600c80546001600160a01b038084166001600160a01b03199092169190911791829055604080519290911682525133917f483bdedaaf23706a9800ac1af0d852b34927780d79f9d6ba60a80c7cad75ea39919081900360200190a250565b60015460408051630f9e0f3360e31b815233600482015290516002926001600160a01b031691637cf07998916024808301926020929190829003018186803b15801561147657600080fd5b505afa15801561148a573d6000803e3d6000fd5b505050506040513d60208110156114a057600080fd5b50511015806114c757506114b2611768565b6001600160a01b0316336001600160a01b0316145b611506576040805162461bcd60e51b81526020600482015260136024820152600080516020613a58833981519152604482015290519081900360640190fd5b60115481141561155d576040805162461bcd60e51b815260206004820152601e60248201527f5365744275796261636b526174653a204e6f2072617465206368616e67650000604482015290519081900360640190fd5b6103e881111561159e5760405162461bcd60e51b81526004018080602001828103825260228152602001806138ed6022913960400191505060405180910390fd5b601181905560408051828152905133917f88811dfd52ed9f34f9900c23a4d65417613124d2ca42175d1088c3456ede5541919081900360200190a250565b6115e46125dd565b6000546001600160a01b03908116911614611634576040805162461bcd60e51b81526020600482018190526024820152600080516020613979833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600c546001600160a01b031633146116dd576040805162461bcd60e51b815260206004820152601c60248201527f416e795374616b653a204f6e6c79205661756c7420616c6c6f77656400000000604482015290519081900360640190fd5b806116e75761072a565b60006117046103e8610862601154856127f090919063ffffffff16565b90506000611718838363ffffffff612c4f16565b9050811561173757601054611733908363ffffffff612c9116565b6010555b801561175457601354611750908263ffffffff612c9116565b6013555b505050565b600b546001600160a01b031681565b6000546001600160a01b031690565b60015460408051630f9e0f3360e31b815233600482015290516002926001600160a01b031691637cf07998916024808301926020929190829003018186803b1580156117c257600080fd5b505afa1580156117d6573d6000803e3d6000fd5b505050506040513d60208110156117ec57600080fd5b505110158061181357506117fe611768565b6001600160a01b0316336001600160a01b0316145b611852576040805162461bcd60e51b81526020600482015260136024820152600080516020613a58833981519152604482015290519081900360640190fd5b6002546001600160a01b03828116911614156118b5576040805162461bcd60e51b815260206004820152601d60248201527f536574556e69737761703a204e6f20756e6973776170206368616e6765000000604482015290519081900360640190fd5b6001600160a01b0381166118fa5760405162461bcd60e51b8152600401808060200182810382526022815260200180613a0e6022913960400191505060405180910390fd5b600280546001600160a01b0319166001600160a01b038381169190911791829055604080516315ab88c960e31b81529051929091169163ad5c464891600480820192602092909190829003018186803b15801561195657600080fd5b505afa15801561196a573d6000803e3d6000fd5b505050506040513d602081101561198057600080fd5b5051600480546001600160a01b0319166001600160a01b039283161781556002546040805163c45a015560e01b81529051919093169263c45a01559281810192602092909190829003018186803b1580156119da57600080fd5b505afa1580156119ee573d6000803e3d6000fd5b505050506040513d6020811015611a0457600080fd5b5051600380546001600160a01b039283166001600160a01b03199091161790819055600254600454604080519285168352908416602083015291909216828201525133917f0cded593bf24267de84b7b3800bf9eb31ddb3c449fff75a64b1232bb7738d6df919081900360600190a250565b336000818152600a60205260409020600201544311611aca576040805162461bcd60e51b815260206004820152601c6024820152600080516020613830833981519152604482015290519081900360640190fd5b611ad2612894565b61072a33612ceb565b6006546001600160a01b031681565b60015460408051630f9e0f3360e31b815233600482015290516002926001600160a01b031691637cf07998916024808301926020929190829003018186803b158015611b3557600080fd5b505afa158015611b49573d6000803e3d6000fd5b505050506040513d6020811015611b5f57600080fd5b5051101580611b865750611b71611768565b6001600160a01b0316336001600160a01b0316145b611bc5576040805162461bcd60e51b81526020600482015260136024820152600080516020613a58833981519152604482015290519081900360640190fd5b6006546001600160a01b0382811691161415611c28576040805162461bcd60e51b815260206004820152601b60248201527f536574506f696e74733a204e6f20706f696e7473206368616e67650000000000604482015290519081900360640190fd5b6001600160a01b038116611c83576040805162461bcd60e51b815260206004820181905260248201527f536574506f696e74733a204d7573742073657420706f696e74732076616c7565604482015290519081900360640190fd5b600680546001600160a01b0319166001600160a01b03838116918217909255600354600480546040805163e6a4390560e01b81529283019490945284166024820152915192169163e6a4390591604480820192602092909190829003018186803b158015611cf057600080fd5b505afa158015611d04573d6000803e3d6000fd5b505050506040513d6020811015611d1a57600080fd5b5051600880546001600160a01b039283166001600160a01b031990911617905560065460408051919092168152905133917f51a2b49da00e06b51910260db68d6491809bb5755e305a6f469fb89e8b5e99d5919081900360200190a250565b60105481565b600f5481565b60015460408051630f9e0f3360e31b815233600482015290516002926001600160a01b031691637cf07998916024808301926020929190829003018186803b158015611dd057600080fd5b505afa158015611de4573d6000803e3d6000fd5b505050506040513d6020811015611dfa57600080fd5b5051101580611e215750611e0c611768565b6001600160a01b0316336001600160a01b0316145b611e60576040805162461bcd60e51b81526020600482015260136024820152600080516020613a58833981519152604482015290519081900360640190fd5b61072a81612ef0565b60015460408051630f9e0f3360e31b815233600482015290516002926001600160a01b031691637cf07998916024808301926020929190829003018186803b158015611eb457600080fd5b505afa158015611ec8573d6000803e3d6000fd5b505050506040513d6020811015611ede57600080fd5b5051101580611f055750611ef0611768565b6001600160a01b0316336001600160a01b0316145b611f44576040805162461bcd60e51b81526020600482015260136024820152600080516020613a58833981519152604482015290519081900360640190fd5b600c60149054906101000a900460ff1615158115151415611fac576040805162461bcd60e51b815260206004820152601b60248201527f5365744163746976653a204e6f20616374697665206368616e67650000000000604482015290519081900360640190fd5b600c8054821515600160a01b90810260ff60a01b199092169190911791829055604080519190920460ff1615158152905133917fff65ce23c24aba283d3834a19ec8ad7641f3fded79d198d930953d37b6ee1d9e919081900360200190a250565b600c54600160a81b900460ff1661206b576040805162461bcd60e51b815260206004820152601e60248201527f526567756c61746f723a204e6f7420696e697469616c697a6564207965740000604482015290519081900360640190fd5b336000818152600a602052604090206002015443116120bf576040805162461bcd60e51b815260206004820152601c6024820152600080516020613830833981519152604482015290519081900360640190fd5b6120c7612894565b610ef03383612f9b565b6003546001600160a01b031681565b60015460408051630f9e0f3360e31b815233600482015290516002926001600160a01b031691637cf07998916024808301926020929190829003018186803b15801561212b57600080fd5b505afa15801561213f573d6000803e3d6000fd5b505050506040513d602081101561215557600080fd5b505110158061217c5750612167611768565b6001600160a01b0316336001600160a01b0316145b6121bb576040805162461bcd60e51b81526020600482015260136024820152600080516020613a58833981519152604482015290519081900360640190fd5b6001600160a01b038116612216576040805162461bcd60e51b815260206004820152601e60248201527f496e697469616c697a653a204d757374207061737320696e205661756c740000604482015290519081900360640190fd5b600c54600160a81b900460ff161561225f5760405162461bcd60e51b81526004018080602001828103825260298152602001806138996029913960400191505060405180910390fd5b600c805460ff60a81b1960ff60a01b196001600160a01b038086166001600160a01b03199094169390931716600160a01b1716600160a81b1791829055604080519290911682525133917f3cd5ec01b1ae7cfec6ca1863e2cd6aa25d6d1702825803ff2b7cc95010fffdc2919081900360200190a250565b60125481565b600e5481565b336000818152600a60205260409020600201544311612337576040805162461bcd60e51b815260206004820152601c6024820152600080516020613830833981519152604482015290519081900360640190fd5b336000908152600a6020526040902080546123835760405162461bcd60e51b815260040180806020018281038252602b8152602001806138c2602b913960400191505060405180910390fd5b60006123a46103e8610862600d5485600001546127f090919063ffffffff16565b82549091506000906123bc908363ffffffff612c4f16565b83546014549192506123d4919063ffffffff612c4f16565b60145560008084556001840181905543600285015560065460408051630852cd8d60e31b81526004810186905290516001600160a01b03909216926342966c689260248084019382900301818387803b15801561243057600080fd5b505af1158015612444573d6000803e3d6000fd5b505060065461246092503391506001600160a01b031683613115565b60408051828152905133917f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd9695919081900360200190a250505050565b6124a4612894565b565b60135481565b600d5481565b6124ba6125dd565b6000546001600160a01b0390811691161461250a576040805162461bcd60e51b81526020600482018190526024820152600080516020613979833981519152604482015290519081900360640190fd5b6001600160a01b03811661254f5760405162461bcd60e51b81526004018080602001828103825260268152602001806138506026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60115481565b6002546001600160a01b031681565b600c546001600160a01b031681565b6007546001600160a01b031681565b3390565b6125e96125dd565b6000546001600160a01b03908116911614612639576040805162461bcd60e51b81526020600482018190526024820152600080516020613979833981519152604482015290519081900360640190fd5b604080516370a0823160e01b815230600482015290516000916001600160a01b038416916370a0823191602480820192602092909190829003018186803b15801561268357600080fd5b505afa158015612697573d6000803e3d6000fd5b505050506040513d60208110156126ad57600080fd5b50519050806126fd576040805162461bcd60e51b815260206004820152601760248201527653776565703a204e6f20746f6b656e2062616c616e636560481b604482015290519081900360640190fd5b6040805163a9059cbb60e01b81523360048201526024810183905290516001600160a01b0384169163a9059cbb9160448083019260209291908290030181600087803b15801561274c57600080fd5b505af1158015612760573d6000803e3d6000fd5b505050506040513d602081101561277657600080fd5b505047156127ac5760405133904780156108fc02916000818181858888f193505050501580156127aa573d6000803e3d6000fd5b505b6040805182815290516001600160a01b0384169133917f39a3bfd42aa3a6ab14fe516cd2417618c0b46203671179fa38a757f24f5d30c39181900360200190a35050565b6000826127ff5750600061284c565b8282028284828161280c57fe5b04146128495760405162461bcd60e51b81526004018080602001828103825260218152602001806139586021913960400191505060405180910390fd5b90505b92915050565b600061284983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506131de565b60145415806128a55750600f544311155b806128ba5750600c54600160a01b900460ff16155b156128c4576124a4565b600c60009054906101000a90046001600160a01b03166001600160a01b0316633e50de306040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561291457600080fd5b505af1158015612928573d6000803e3d6000fd5b50505050612961612952601454610862670de0b6b3a76400006013546127f090919063ffffffff16565b6012549063ffffffff612c9116565b60125543600f556000601355565b6001600160a01b0382166000908152600a6020526040902080548211156129dd576040805162461bcd60e51b815260206004820152601b60248201527f57697468647261773a204e6f7420656e6f756768207374616b65640000000000604482015290519081900360640190fd5b6129e683612b41565b6000612a036103e8610862600d54866127f090919063ffffffff16565b90506000612a17848363ffffffff612c4f16565b90508115612a2857612a2882613280565b601454612a3b908563ffffffff612c4f16565b6014558254612a50908563ffffffff612c4f16565b808455601254612a7491670de0b6b3a764000091610862919063ffffffff6127f016565b60018401556006546040805163a9059cbb60e01b81526001600160a01b038881166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015612acf57600080fd5b505af1158015612ae3573d6000803e3d6000fd5b505050506040513d6020811015612af957600080fd5b50506040805182815290516001600160a01b038716917f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364919081900360200190a25050505050565b6001600160a01b0381166000908152600a6020526040812090612b6383611213565b905080612b7157505061072a565b6012548254612b9391670de0b6b3a7640000916108629163ffffffff6127f016565b6001830155436002830155600c546040805163a8031a1d60e01b81526001600160a01b038681166004830152602482018590529151919092169163a8031a1d91604480830192600092919082900301818387803b158015612bf357600080fd5b505af1158015612c07573d6000803e3d6000fd5b50506040805184815290516001600160a01b03871693507f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d492509081900360200190a2505050565b600061284983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506134d7565b600082820183811015612849576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6001600160a01b038082166000908152600a602052604090208054600b549192909116612d5a576040805162461bcd60e51b8152602060048201526018602482015277135a59dc985d194e88139bc81b5a59dc985d1bdc881cd95d60421b604482015290519081900360640190fd5b60008111612daf576040805162461bcd60e51b815260206004820152601d60248201527f4d6967726174653a204e6f20746f6b656e7320746f206d696772617465000000604482015290519081900360640190fd5b600654600b546040805163095ea7b360e01b81526001600160a01b039283166004820152602481018590529051919092169163095ea7b39160448083019260209291908290030181600087803b158015612e0857600080fd5b505af1158015612e1c573d6000803e3d6000fd5b505050506040513d6020811015612e3257600080fd5b5050600b546006546040805163049ff5b160e31b81526001600160a01b038781166004830152928316602482015260448101859052905191909216916324ffad8891606480830192600092919082900301818387803b158015612e9457600080fd5b505af1158015612ea8573d6000803e3d6000fd5b50506040805184815290516001600160a01b03871693507fa59785389b00cbd19745afbe8d59b28e3161395c6b1e3525861a2b0dede0b90d92509081900360200190a2505050565b6001546001600160a01b0382811691161415612f3d5760405162461bcd60e51b81526004018080602001828103825260238152602001806138766023913960400191505060405180910390fd5b600180546001600160a01b038084166001600160a01b03199092169190911791829055604080519290911682525133917f434a2db650703b36c824e745330d6397cdaa9ee2cc891a4938ae853e1c50b68d919081900360200190a250565b6001600160a01b0382166000908152600a6020526040902081612fef5760405162461bcd60e51b81526004018080602001828103825260238152602001806139356023913960400191505060405180910390fd5b612ff883612b41565b60145461300b908363ffffffff612c9116565b6014558054613020908363ffffffff612c9116565b80825560125461304491670de0b6b3a764000091610862919063ffffffff6127f016565b6001820155600654604080516323b872dd60e01b81526001600160a01b03868116600483015230602483015260448201869052915191909216916323b872dd9160648083019260209291908290030181600087803b1580156130a557600080fd5b505af11580156130b9573d6000803e3d6000fd5b505050506040513d60208110156130cf57600080fd5b50506040805183815290516001600160a01b038516917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a2505050565b8061311f57611754565b604080516370a0823160e01b815230600482015290516000916001600160a01b038516916370a0823191602480820192602092909190829003018186803b15801561316957600080fd5b505afa15801561317d573d6000803e3d6000fd5b505050506040513d602081101561319357600080fd5b50519050808211156131be576131b96001600160a01b038416858363ffffffff61353116565b6131d8565b6131d86001600160a01b038416858463ffffffff61353116565b50505050565b6000818361326a5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561322f578181015183820152602001613217565b50505050905090810190601f16801561325c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161327657fe5b0495945050505050565b61328861072d565b1561338757600654600c546040805163a9059cbb60e01b81526001600160a01b039283166004820152602481018590529051919092169163a9059cbb9160448083019260209291908290030181600087803b1580156132e657600080fd5b505af11580156132fa573d6000803e3d6000fd5b505050506040513d602081101561331057600080fd5b5050600c54600654604080516302306a4560e51b81526001600160a01b039283166004820152602481018590529051919092169163460d48a091604480830192600092919082900301818387803b15801561336a57600080fd5b505af115801561337e573d6000803e3d6000fd5b5050505061072a565b600c546005546010546040805163350b849560e21b81526001600160a01b039384166004820152602481019290925251919092169163d42e125491604480830192600092919082900301818387803b1580156133e257600080fd5b505af11580156133f6573d6000803e3d6000fd5b505060065460408051630852cd8d60e31b81526004810186905290516001600160a01b0390921693506342966c68925060248082019260009290919082900301818387803b15801561344757600080fd5b505af115801561345b573d6000803e3d6000fd5b5050600654600c546040805163d270f98760e01b81526001600160a01b039283166004820152600060248201819052915192909316945063d270f987935060448084019391929182900301818387803b1580156134b757600080fd5b505af11580156134cb573d6000803e3d6000fd5b50506000601055505050565b600081848411156135295760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561322f578181015183820152602001613217565b505050900390565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261175490849060606135d3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661362f9092919063ffffffff16565b805190915015611754578080602001905160208110156135f257600080fd5b50516117545760405162461bcd60e51b815260040180806020018281038252602a8152602001806139e4602a913960400191505060405180910390fd5b606061363e8484600085613646565b949350505050565b6060824710156136875760405162461bcd60e51b815260040180806020018281038252602681526020018061390f6026913960400191505060405180910390fd5b613690856137a2565b6136e1576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106137205780518252601f199092019160209182019101613701565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613782576040519150601f19603f3d011682016040523d82523d6000602084013e613787565b606091505b50915091506137978282866137a8565b979650505050505050565b3b151590565b606083156137b7575081611290565b8251156137c75782518084602001fd5b60405162461bcd60e51b815260206004820181815284516024840152845185939192839260440191908501908083836000831561322f578181015183820152602001613217565b6040518060600160405280600081526020016000815260200160008152509056fe526567756c61746f723a204d7573742077616974203120626c6f636b000000004f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536574476f7665726e616e63653a204e6f20676f7665726e616e6365206368616e6765496e697469616c697a653a20526567756c61746f7220616c726561647920696e697469616c697a6564456d657267656e637957697468647261773a207573657220616d6f756e7420696e73756666696369656e745365744275796261636b526174653a2043616e6e6f74206578636565642031303025416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4465706f7369743a2043616e6e6f74206465706f736974207a65726f20746f6b656e73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725365744d756c7469706c6965723a204e6f206d756c7469706c696572206368616e676553776565703a2043616e6e6f7420776974686472617720626c61636b6c697374656420746f6b656e5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564536574556e69737761703a204d7573742073657420756e69737761702076616c75655365744d756c7469706c6965723a204d7573742062652067726561746572207468616e207a65726f476f763a204f6e6c7920476f7665726e6f727300000000000000000000000000a26469706673582212209672efd40a898696dc90577c6c6b0d4ea30f988a5475458550460eae7f02daf264736f6c63430006060033536574476f7665726e616e63653a204e6f20676f7665726e616e6365206368616e6765",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102955760003560e01c80637cd07e4711610167578063c4d66de8116100ce578063eff9884311610087578063eff9884314610623578063f2fde38b1461062b578063f76024c414610651578063f887ea4014610659578063fbfa77cf14610661578063fdcc7b081461066957610295565b8063c4d66de8146105d5578063c7e1d0b1146105fb578063d50cb88b14610603578063db2e21bc1461060b578063e3161ddd14610613578063eded3fda1461061b57610295565b8063a8b51fc811610120578063a8b51fc81461055b578063a9f8d18114610563578063ab033ea91461056b578063acec338a14610591578063b6b55f25146105b0578063c45a0155146105cd57610295565b80637cd07e47146104ef5780638da5cb5b146104f75780638efecdda146104ff5780638fd3ab8014610525578063917f97371461052d5780639f25cde71461053557610295565b80633a98ef391161020b5780635aa6e675116101c45780635aa6e675146104595780635eebea20146104615780636817031b146104875780636e10f476146104ad578063715018a6146104ca57806374de4ec4146104d257610295565b80633a98ef39146104025780633fc8cef31461041c578063410dbf7e1461042457806341c0e1b514610441578063463d7ac3146104495780634e71d92d1461045157610295565b80631959a0021161025d5780631959a002146103145780632081c4ea1461035857806321603e8b1461037557806323cf31181461039b5780632e1a7d4d146103c157806337710aca146103de57610295565b806301681a621461029a57806301e3b4df146102c257806302fb0c5e146102de578063144fa6d7146102e6578063158ef93e1461030c575b600080fd5b6102c0600480360360208110156102b057600080fd5b50356001600160a01b0316610671565b005b6102ca61072d565b604080519115158252519081900360200190f35b6102ca610876565b6102c0600480360360208110156102fc57600080fd5b50356001600160a01b0316610886565b6102ca610b15565b61033a6004803603602081101561032a57600080fd5b50356001600160a01b0316610b25565b60408051938452602084019290925282820152519081900360600190f35b6102c06004803603602081101561036e57600080fd5b5035610b46565b6102ca6004803603602081101561038b57600080fd5b50356001600160a01b0316610cdf565b6102c0600480360360208110156103b157600080fd5b50356001600160a01b0316610cfd565b6102c0600480360360208110156103d757600080fd5b5035610e8a565b6103e6610ef4565b604080516001600160a01b039092168252519081900360200190f35b61040a610f03565b60408051918252519081900360200190f35b6103e6610f09565b6102c06004803603602081101561043a57600080fd5b5035610f18565b6102c06110d7565b6103e6611132565b6102c0611141565b6103e6611204565b61040a6004803603602081101561047757600080fd5b50356001600160a01b0316611213565b6102c06004803603602081101561049d57600080fd5b50356001600160a01b0316611297565b6102c0600480360360208110156104c357600080fd5b503561142b565b6102c06115dc565b6102c0600480360360208110156104e857600080fd5b503561167e565b6103e6611759565b6103e6611768565b6102c06004803603602081101561051557600080fd5b50356001600160a01b0316611777565b6102c0611a76565b6103e6611adb565b6102c06004803603602081101561054b57600080fd5b50356001600160a01b0316611aea565b61040a611d79565b61040a611d7f565b6102c06004803603602081101561058157600080fd5b50356001600160a01b0316611d85565b6102c0600480360360208110156105a757600080fd5b50351515611e69565b6102c0600480360360208110156105c657600080fd5b503561200d565b6103e66120d1565b6102c0600480360360208110156105eb57600080fd5b50356001600160a01b03166120e0565b61040a6122d7565b61040a6122dd565b6102c06122e3565b6102c061249c565b61040a6124a6565b61040a6124ac565b6102c06004803603602081101561064157600080fd5b50356001600160a01b03166124b2565b61040a6125aa565b6103e66125b0565b6103e66125bf565b6103e66125ce565b6106796125dd565b6000546001600160a01b039081169116146106c9576040805162461bcd60e51b81526020600482018190526024820152600080516020613979833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526009602052604090205460ff16156107215760405162461bcd60e51b81526004018080602001828103825260288152602001806139bc6028913960400191505060405180910390fd5b61072a816125e1565b50565b600c546005546007546040805163057d4cc360e51b81526001600160a01b0393841660048201529183166024830152516000938493169163afa99860916044808301926020929190829003018186803b15801561078957600080fd5b505afa15801561079d573d6000803e3d6000fd5b505050506040513d60208110156107b357600080fd5b5051600c546006546008546040805163057d4cc360e51b81526001600160a01b039384166004820152918316602483015251939450600093919092169163afa99860916044808301926020929190829003018186803b15801561081557600080fd5b505afa158015610829573d6000803e3d6000fd5b505050506040513d602081101561083f57600080fd5b5051600e54909150829061086e906103e89061086290859063ffffffff6127f016565b9063ffffffff61285216565b119250505090565b600c54600160a01b900460ff1681565b60015460408051630f9e0f3360e31b815233600482015290516002926001600160a01b031691637cf07998916024808301926020929190829003018186803b1580156108d157600080fd5b505afa1580156108e5573d6000803e3d6000fd5b505050506040513d60208110156108fb57600080fd5b5051101580610922575061090d611768565b6001600160a01b0316336001600160a01b0316145b610961576040805162461bcd60e51b81526020600482015260136024820152600080516020613a58833981519152604482015290519081900360640190fd5b6005546001600160a01b03828116911614156109c4576040805162461bcd60e51b815260206004820152601960248201527f536574546f6b656e3a204e6f20746f6b656e206368616e676500000000000000604482015290519081900360640190fd5b6001600160a01b038116610a1f576040805162461bcd60e51b815260206004820152601e60248201527f536574546f6b656e3a204d7573742073657420746f6b656e2076616c75650000604482015290519081900360640190fd5b600580546001600160a01b0319166001600160a01b03838116918217909255600354600480546040805163e6a4390560e01b81529283019490945284166024820152915192169163e6a4390591604480820192602092909190829003018186803b158015610a8c57600080fd5b505afa158015610aa0573d6000803e3d6000fd5b505050506040513d6020811015610ab657600080fd5b5051600780546001600160a01b039283166001600160a01b031990911617905560055460408051919092168152905133917f0b1186973f810894b87ab0bfbee422fddcaad21b46dc705a561451bbb6bac117919081900360200190a250565b600c54600160a81b900460ff1681565b600a6020526000908152604090208054600182015460029092015490919083565b60015460408051630f9e0f3360e31b815233600482015290516002926001600160a01b031691637cf07998916024808301926020929190829003018186803b158015610b9157600080fd5b505afa158015610ba5573d6000803e3d6000fd5b505050506040513d6020811015610bbb57600080fd5b5051101580610be25750610bcd611768565b6001600160a01b0316336001600160a01b0316145b610c21576040805162461bcd60e51b81526020600482015260136024820152600080516020613a58833981519152604482015290519081900360640190fd5b600e54811415610c625760405162461bcd60e51b81526004018080602001828103825260238152602001806139996023913960400191505060405180910390fd5b60008111610ca15760405162461bcd60e51b8152600401808060200182810382526028815260200180613a306028913960400191505060405180910390fd5b600e81905560408051828152905133917fbbc6ccf73c005acc6dc271f74cfc898ad65d464c3b6f2cebc6d1ef9fd51ff44a919081900360200190a250565b6001600160a01b031660009081526009602052604090205460ff1690565b60015460408051630f9e0f3360e31b815233600482015290516002926001600160a01b031691637cf07998916024808301926020929190829003018186803b158015610d4857600080fd5b505afa158015610d5c573d6000803e3d6000fd5b505050506040513d6020811015610d7257600080fd5b5051101580610d995750610d84611768565b6001600160a01b0316336001600160a01b0316145b610dd8576040805162461bcd60e51b81526020600482015260136024820152600080516020613a58833981519152604482015290519081900360640190fd5b6001600160a01b038116610e33576040805162461bcd60e51b815260206004820152601f60248201527f5365744d69677261746f723a204e6f206d69677261746f72206368616e676500604482015290519081900360640190fd5b600b80546001600160a01b0383166001600160a01b03199091168117909155604080519182525133917f17356f011fa307735bd27bcbcd4ee385789d5155c6e44c093a1936e387f62ae5919081900360200190a250565b336000818152600a60205260409020600201544311610ede576040805162461bcd60e51b815260206004820152601c6024820152600080516020613830833981519152604482015290519081900360640190fd5b610ee6612894565b610ef0338361296f565b5050565b6005546001600160a01b031681565b60145481565b6004546001600160a01b031681565b60015460408051630f9e0f3360e31b815233600482015290516002926001600160a01b031691637cf07998916024808301926020929190829003018186803b158015610f6357600080fd5b505afa158015610f77573d6000803e3d6000fd5b505050506040513d6020811015610f8d57600080fd5b5051101580610fb45750610f9f611768565b6001600160a01b0316336001600160a01b0316145b610ff3576040805162461bcd60e51b81526020600482015260136024820152600080516020613a58833981519152604482015290519081900360640190fd5b600d54811415611042576040805162461bcd60e51b81526020600482015260156024820152745365744665653a204e6f20666565206368616e676560581b604482015290519081900360640190fd5b6103e8811115611099576040805162461bcd60e51b815260206004820152601e60248201527f5365744665653a204665652063616e6e6f742065786365656420313030250000604482015290519081900360640190fd5b600d81905560408051828152905133917fa0f94b43ca87c9f1f3e8dcf3e8291bd5f163cdfafd57bfbc7e054dc910155fad919081900360200190a250565b6110df6125dd565b6000546001600160a01b0390811691161461112f576040805162461bcd60e51b81526020600482018190526024820152600080516020613979833981519152604482015290519081900360640190fd5b33ff5b6008546001600160a01b031681565b600c54600160a81b900460ff1661119f576040805162461bcd60e51b815260206004820152601e60248201527f526567756c61746f723a204e6f7420696e697469616c697a6564207965740000604482015290519081900360640190fd5b336000818152600a602052604090206002015443116111f3576040805162461bcd60e51b815260206004820152601c6024820152600080516020613830833981519152604482015290519081900360640190fd5b6111fb612894565b61072a33612b41565b6001546001600160a01b031681565b600061121d61380e565b506001600160a01b0382166000908152600a602090815260409182902082516060810184528154808252600183015493820184905260029092015493810193909352601254611290929161128491670de0b6b3a7640000916108629163ffffffff6127f016565b9063ffffffff612c4f16565b9392505050565b60015460408051630f9e0f3360e31b815233600482015290516002926001600160a01b031691637cf07998916024808301926020929190829003018186803b1580156112e257600080fd5b505afa1580156112f6573d6000803e3d6000fd5b505050506040513d602081101561130c57600080fd5b5051101580611333575061131e611768565b6001600160a01b0316336001600160a01b0316145b611372576040805162461bcd60e51b81526020600482015260136024820152600080516020613a58833981519152604482015290519081900360640190fd5b6001600160a01b0381166113cd576040805162461bcd60e51b815260206004820152601c60248201527f5365745661756c743a204e6f206d69677261746f72206368616e676500000000604482015290519081900360640190fd5b600c80546001600160a01b038084166001600160a01b03199092169190911791829055604080519290911682525133917f483bdedaaf23706a9800ac1af0d852b34927780d79f9d6ba60a80c7cad75ea39919081900360200190a250565b60015460408051630f9e0f3360e31b815233600482015290516002926001600160a01b031691637cf07998916024808301926020929190829003018186803b15801561147657600080fd5b505afa15801561148a573d6000803e3d6000fd5b505050506040513d60208110156114a057600080fd5b50511015806114c757506114b2611768565b6001600160a01b0316336001600160a01b0316145b611506576040805162461bcd60e51b81526020600482015260136024820152600080516020613a58833981519152604482015290519081900360640190fd5b60115481141561155d576040805162461bcd60e51b815260206004820152601e60248201527f5365744275796261636b526174653a204e6f2072617465206368616e67650000604482015290519081900360640190fd5b6103e881111561159e5760405162461bcd60e51b81526004018080602001828103825260228152602001806138ed6022913960400191505060405180910390fd5b601181905560408051828152905133917f88811dfd52ed9f34f9900c23a4d65417613124d2ca42175d1088c3456ede5541919081900360200190a250565b6115e46125dd565b6000546001600160a01b03908116911614611634576040805162461bcd60e51b81526020600482018190526024820152600080516020613979833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600c546001600160a01b031633146116dd576040805162461bcd60e51b815260206004820152601c60248201527f416e795374616b653a204f6e6c79205661756c7420616c6c6f77656400000000604482015290519081900360640190fd5b806116e75761072a565b60006117046103e8610862601154856127f090919063ffffffff16565b90506000611718838363ffffffff612c4f16565b9050811561173757601054611733908363ffffffff612c9116565b6010555b801561175457601354611750908263ffffffff612c9116565b6013555b505050565b600b546001600160a01b031681565b6000546001600160a01b031690565b60015460408051630f9e0f3360e31b815233600482015290516002926001600160a01b031691637cf07998916024808301926020929190829003018186803b1580156117c257600080fd5b505afa1580156117d6573d6000803e3d6000fd5b505050506040513d60208110156117ec57600080fd5b505110158061181357506117fe611768565b6001600160a01b0316336001600160a01b0316145b611852576040805162461bcd60e51b81526020600482015260136024820152600080516020613a58833981519152604482015290519081900360640190fd5b6002546001600160a01b03828116911614156118b5576040805162461bcd60e51b815260206004820152601d60248201527f536574556e69737761703a204e6f20756e6973776170206368616e6765000000604482015290519081900360640190fd5b6001600160a01b0381166118fa5760405162461bcd60e51b8152600401808060200182810382526022815260200180613a0e6022913960400191505060405180910390fd5b600280546001600160a01b0319166001600160a01b038381169190911791829055604080516315ab88c960e31b81529051929091169163ad5c464891600480820192602092909190829003018186803b15801561195657600080fd5b505afa15801561196a573d6000803e3d6000fd5b505050506040513d602081101561198057600080fd5b5051600480546001600160a01b0319166001600160a01b039283161781556002546040805163c45a015560e01b81529051919093169263c45a01559281810192602092909190829003018186803b1580156119da57600080fd5b505afa1580156119ee573d6000803e3d6000fd5b505050506040513d6020811015611a0457600080fd5b5051600380546001600160a01b039283166001600160a01b03199091161790819055600254600454604080519285168352908416602083015291909216828201525133917f0cded593bf24267de84b7b3800bf9eb31ddb3c449fff75a64b1232bb7738d6df919081900360600190a250565b336000818152600a60205260409020600201544311611aca576040805162461bcd60e51b815260206004820152601c6024820152600080516020613830833981519152604482015290519081900360640190fd5b611ad2612894565b61072a33612ceb565b6006546001600160a01b031681565b60015460408051630f9e0f3360e31b815233600482015290516002926001600160a01b031691637cf07998916024808301926020929190829003018186803b158015611b3557600080fd5b505afa158015611b49573d6000803e3d6000fd5b505050506040513d6020811015611b5f57600080fd5b5051101580611b865750611b71611768565b6001600160a01b0316336001600160a01b0316145b611bc5576040805162461bcd60e51b81526020600482015260136024820152600080516020613a58833981519152604482015290519081900360640190fd5b6006546001600160a01b0382811691161415611c28576040805162461bcd60e51b815260206004820152601b60248201527f536574506f696e74733a204e6f20706f696e7473206368616e67650000000000604482015290519081900360640190fd5b6001600160a01b038116611c83576040805162461bcd60e51b815260206004820181905260248201527f536574506f696e74733a204d7573742073657420706f696e74732076616c7565604482015290519081900360640190fd5b600680546001600160a01b0319166001600160a01b03838116918217909255600354600480546040805163e6a4390560e01b81529283019490945284166024820152915192169163e6a4390591604480820192602092909190829003018186803b158015611cf057600080fd5b505afa158015611d04573d6000803e3d6000fd5b505050506040513d6020811015611d1a57600080fd5b5051600880546001600160a01b039283166001600160a01b031990911617905560065460408051919092168152905133917f51a2b49da00e06b51910260db68d6491809bb5755e305a6f469fb89e8b5e99d5919081900360200190a250565b60105481565b600f5481565b60015460408051630f9e0f3360e31b815233600482015290516002926001600160a01b031691637cf07998916024808301926020929190829003018186803b158015611dd057600080fd5b505afa158015611de4573d6000803e3d6000fd5b505050506040513d6020811015611dfa57600080fd5b5051101580611e215750611e0c611768565b6001600160a01b0316336001600160a01b0316145b611e60576040805162461bcd60e51b81526020600482015260136024820152600080516020613a58833981519152604482015290519081900360640190fd5b61072a81612ef0565b60015460408051630f9e0f3360e31b815233600482015290516002926001600160a01b031691637cf07998916024808301926020929190829003018186803b158015611eb457600080fd5b505afa158015611ec8573d6000803e3d6000fd5b505050506040513d6020811015611ede57600080fd5b5051101580611f055750611ef0611768565b6001600160a01b0316336001600160a01b0316145b611f44576040805162461bcd60e51b81526020600482015260136024820152600080516020613a58833981519152604482015290519081900360640190fd5b600c60149054906101000a900460ff1615158115151415611fac576040805162461bcd60e51b815260206004820152601b60248201527f5365744163746976653a204e6f20616374697665206368616e67650000000000604482015290519081900360640190fd5b600c8054821515600160a01b90810260ff60a01b199092169190911791829055604080519190920460ff1615158152905133917fff65ce23c24aba283d3834a19ec8ad7641f3fded79d198d930953d37b6ee1d9e919081900360200190a250565b600c54600160a81b900460ff1661206b576040805162461bcd60e51b815260206004820152601e60248201527f526567756c61746f723a204e6f7420696e697469616c697a6564207965740000604482015290519081900360640190fd5b336000818152600a602052604090206002015443116120bf576040805162461bcd60e51b815260206004820152601c6024820152600080516020613830833981519152604482015290519081900360640190fd5b6120c7612894565b610ef03383612f9b565b6003546001600160a01b031681565b60015460408051630f9e0f3360e31b815233600482015290516002926001600160a01b031691637cf07998916024808301926020929190829003018186803b15801561212b57600080fd5b505afa15801561213f573d6000803e3d6000fd5b505050506040513d602081101561215557600080fd5b505110158061217c5750612167611768565b6001600160a01b0316336001600160a01b0316145b6121bb576040805162461bcd60e51b81526020600482015260136024820152600080516020613a58833981519152604482015290519081900360640190fd5b6001600160a01b038116612216576040805162461bcd60e51b815260206004820152601e60248201527f496e697469616c697a653a204d757374207061737320696e205661756c740000604482015290519081900360640190fd5b600c54600160a81b900460ff161561225f5760405162461bcd60e51b81526004018080602001828103825260298152602001806138996029913960400191505060405180910390fd5b600c805460ff60a81b1960ff60a01b196001600160a01b038086166001600160a01b03199094169390931716600160a01b1716600160a81b1791829055604080519290911682525133917f3cd5ec01b1ae7cfec6ca1863e2cd6aa25d6d1702825803ff2b7cc95010fffdc2919081900360200190a250565b60125481565b600e5481565b336000818152600a60205260409020600201544311612337576040805162461bcd60e51b815260206004820152601c6024820152600080516020613830833981519152604482015290519081900360640190fd5b336000908152600a6020526040902080546123835760405162461bcd60e51b815260040180806020018281038252602b8152602001806138c2602b913960400191505060405180910390fd5b60006123a46103e8610862600d5485600001546127f090919063ffffffff16565b82549091506000906123bc908363ffffffff612c4f16565b83546014549192506123d4919063ffffffff612c4f16565b60145560008084556001840181905543600285015560065460408051630852cd8d60e31b81526004810186905290516001600160a01b03909216926342966c689260248084019382900301818387803b15801561243057600080fd5b505af1158015612444573d6000803e3d6000fd5b505060065461246092503391506001600160a01b031683613115565b60408051828152905133917f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd9695919081900360200190a250505050565b6124a4612894565b565b60135481565b600d5481565b6124ba6125dd565b6000546001600160a01b0390811691161461250a576040805162461bcd60e51b81526020600482018190526024820152600080516020613979833981519152604482015290519081900360640190fd5b6001600160a01b03811661254f5760405162461bcd60e51b81526004018080602001828103825260268152602001806138506026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60115481565b6002546001600160a01b031681565b600c546001600160a01b031681565b6007546001600160a01b031681565b3390565b6125e96125dd565b6000546001600160a01b03908116911614612639576040805162461bcd60e51b81526020600482018190526024820152600080516020613979833981519152604482015290519081900360640190fd5b604080516370a0823160e01b815230600482015290516000916001600160a01b038416916370a0823191602480820192602092909190829003018186803b15801561268357600080fd5b505afa158015612697573d6000803e3d6000fd5b505050506040513d60208110156126ad57600080fd5b50519050806126fd576040805162461bcd60e51b815260206004820152601760248201527653776565703a204e6f20746f6b656e2062616c616e636560481b604482015290519081900360640190fd5b6040805163a9059cbb60e01b81523360048201526024810183905290516001600160a01b0384169163a9059cbb9160448083019260209291908290030181600087803b15801561274c57600080fd5b505af1158015612760573d6000803e3d6000fd5b505050506040513d602081101561277657600080fd5b505047156127ac5760405133904780156108fc02916000818181858888f193505050501580156127aa573d6000803e3d6000fd5b505b6040805182815290516001600160a01b0384169133917f39a3bfd42aa3a6ab14fe516cd2417618c0b46203671179fa38a757f24f5d30c39181900360200190a35050565b6000826127ff5750600061284c565b8282028284828161280c57fe5b04146128495760405162461bcd60e51b81526004018080602001828103825260218152602001806139586021913960400191505060405180910390fd5b90505b92915050565b600061284983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506131de565b60145415806128a55750600f544311155b806128ba5750600c54600160a01b900460ff16155b156128c4576124a4565b600c60009054906101000a90046001600160a01b03166001600160a01b0316633e50de306040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561291457600080fd5b505af1158015612928573d6000803e3d6000fd5b50505050612961612952601454610862670de0b6b3a76400006013546127f090919063ffffffff16565b6012549063ffffffff612c9116565b60125543600f556000601355565b6001600160a01b0382166000908152600a6020526040902080548211156129dd576040805162461bcd60e51b815260206004820152601b60248201527f57697468647261773a204e6f7420656e6f756768207374616b65640000000000604482015290519081900360640190fd5b6129e683612b41565b6000612a036103e8610862600d54866127f090919063ffffffff16565b90506000612a17848363ffffffff612c4f16565b90508115612a2857612a2882613280565b601454612a3b908563ffffffff612c4f16565b6014558254612a50908563ffffffff612c4f16565b808455601254612a7491670de0b6b3a764000091610862919063ffffffff6127f016565b60018401556006546040805163a9059cbb60e01b81526001600160a01b038881166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015612acf57600080fd5b505af1158015612ae3573d6000803e3d6000fd5b505050506040513d6020811015612af957600080fd5b50506040805182815290516001600160a01b038716917f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364919081900360200190a25050505050565b6001600160a01b0381166000908152600a6020526040812090612b6383611213565b905080612b7157505061072a565b6012548254612b9391670de0b6b3a7640000916108629163ffffffff6127f016565b6001830155436002830155600c546040805163a8031a1d60e01b81526001600160a01b038681166004830152602482018590529151919092169163a8031a1d91604480830192600092919082900301818387803b158015612bf357600080fd5b505af1158015612c07573d6000803e3d6000fd5b50506040805184815290516001600160a01b03871693507f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d492509081900360200190a2505050565b600061284983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506134d7565b600082820183811015612849576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6001600160a01b038082166000908152600a602052604090208054600b549192909116612d5a576040805162461bcd60e51b8152602060048201526018602482015277135a59dc985d194e88139bc81b5a59dc985d1bdc881cd95d60421b604482015290519081900360640190fd5b60008111612daf576040805162461bcd60e51b815260206004820152601d60248201527f4d6967726174653a204e6f20746f6b656e7320746f206d696772617465000000604482015290519081900360640190fd5b600654600b546040805163095ea7b360e01b81526001600160a01b039283166004820152602481018590529051919092169163095ea7b39160448083019260209291908290030181600087803b158015612e0857600080fd5b505af1158015612e1c573d6000803e3d6000fd5b505050506040513d6020811015612e3257600080fd5b5050600b546006546040805163049ff5b160e31b81526001600160a01b038781166004830152928316602482015260448101859052905191909216916324ffad8891606480830192600092919082900301818387803b158015612e9457600080fd5b505af1158015612ea8573d6000803e3d6000fd5b50506040805184815290516001600160a01b03871693507fa59785389b00cbd19745afbe8d59b28e3161395c6b1e3525861a2b0dede0b90d92509081900360200190a2505050565b6001546001600160a01b0382811691161415612f3d5760405162461bcd60e51b81526004018080602001828103825260238152602001806138766023913960400191505060405180910390fd5b600180546001600160a01b038084166001600160a01b03199092169190911791829055604080519290911682525133917f434a2db650703b36c824e745330d6397cdaa9ee2cc891a4938ae853e1c50b68d919081900360200190a250565b6001600160a01b0382166000908152600a6020526040902081612fef5760405162461bcd60e51b81526004018080602001828103825260238152602001806139356023913960400191505060405180910390fd5b612ff883612b41565b60145461300b908363ffffffff612c9116565b6014558054613020908363ffffffff612c9116565b80825560125461304491670de0b6b3a764000091610862919063ffffffff6127f016565b6001820155600654604080516323b872dd60e01b81526001600160a01b03868116600483015230602483015260448201869052915191909216916323b872dd9160648083019260209291908290030181600087803b1580156130a557600080fd5b505af11580156130b9573d6000803e3d6000fd5b505050506040513d60208110156130cf57600080fd5b50506040805183815290516001600160a01b038516917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a2505050565b8061311f57611754565b604080516370a0823160e01b815230600482015290516000916001600160a01b038516916370a0823191602480820192602092909190829003018186803b15801561316957600080fd5b505afa15801561317d573d6000803e3d6000fd5b505050506040513d602081101561319357600080fd5b50519050808211156131be576131b96001600160a01b038416858363ffffffff61353116565b6131d8565b6131d86001600160a01b038416858463ffffffff61353116565b50505050565b6000818361326a5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561322f578181015183820152602001613217565b50505050905090810190601f16801561325c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161327657fe5b0495945050505050565b61328861072d565b1561338757600654600c546040805163a9059cbb60e01b81526001600160a01b039283166004820152602481018590529051919092169163a9059cbb9160448083019260209291908290030181600087803b1580156132e657600080fd5b505af11580156132fa573d6000803e3d6000fd5b505050506040513d602081101561331057600080fd5b5050600c54600654604080516302306a4560e51b81526001600160a01b039283166004820152602481018590529051919092169163460d48a091604480830192600092919082900301818387803b15801561336a57600080fd5b505af115801561337e573d6000803e3d6000fd5b5050505061072a565b600c546005546010546040805163350b849560e21b81526001600160a01b039384166004820152602481019290925251919092169163d42e125491604480830192600092919082900301818387803b1580156133e257600080fd5b505af11580156133f6573d6000803e3d6000fd5b505060065460408051630852cd8d60e31b81526004810186905290516001600160a01b0390921693506342966c68925060248082019260009290919082900301818387803b15801561344757600080fd5b505af115801561345b573d6000803e3d6000fd5b5050600654600c546040805163d270f98760e01b81526001600160a01b039283166004820152600060248201819052915192909316945063d270f987935060448084019391929182900301818387803b1580156134b757600080fd5b505af11580156134cb573d6000803e3d6000fd5b50506000601055505050565b600081848411156135295760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561322f578181015183820152602001613217565b505050900390565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261175490849060606135d3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661362f9092919063ffffffff16565b805190915015611754578080602001905160208110156135f257600080fd5b50516117545760405162461bcd60e51b815260040180806020018281038252602a8152602001806139e4602a913960400191505060405180910390fd5b606061363e8484600085613646565b949350505050565b6060824710156136875760405162461bcd60e51b815260040180806020018281038252602681526020018061390f6026913960400191505060405180910390fd5b613690856137a2565b6136e1576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106137205780518252601f199092019160209182019101613701565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613782576040519150601f19603f3d011682016040523d82523d6000602084013e613787565b606091505b50915091506137978282866137a8565b979650505050505050565b3b151590565b606083156137b7575081611290565b8251156137c75782518084602001fd5b60405162461bcd60e51b815260206004820181815284516024840152845185939192839260440191908501908083836000831561322f578181015183820152602001613217565b6040518060600160405280600081526020016000815260200160008152509056fe526567756c61746f723a204d7573742077616974203120626c6f636b000000004f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536574476f7665726e616e63653a204e6f20676f7665726e616e6365206368616e6765496e697469616c697a653a20526567756c61746f7220616c726561647920696e697469616c697a6564456d657267656e637957697468647261773a207573657220616d6f756e7420696e73756666696369656e745365744275796261636b526174653a2043616e6e6f74206578636565642031303025416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4465706f7369743a2043616e6e6f74206465706f736974207a65726f20746f6b656e73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725365744d756c7469706c6965723a204e6f206d756c7469706c696572206368616e676553776565703a2043616e6e6f7420776974686472617720626c61636b6c697374656420746f6b656e5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564536574556e69737761703a204d7573742073657420756e69737761702076616c75655365744d756c7469706c6965723a204d7573742062652067726561746572207468616e207a65726f476f763a204f6e6c7920476f7665726e6f727300000000000000000000000000a26469706673582212209672efd40a898696dc90577c6c6b0d4ea30f988a5475458550460eae7f02daf264736f6c63430006060033",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4083,
        "contract": "contracts/AnyStakeRegulator.sol:AnyStakeRegulator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3878,
        "contract": "contracts/AnyStakeRegulator.sol:AnyStakeRegulator",
        "label": "governance",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7480,
        "contract": "contracts/AnyStakeRegulator.sol:AnyStakeRegulator",
        "label": "router",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 7482,
        "contract": "contracts/AnyStakeRegulator.sol:AnyStakeRegulator",
        "label": "factory",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 7484,
        "contract": "contracts/AnyStakeRegulator.sol:AnyStakeRegulator",
        "label": "weth",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 7486,
        "contract": "contracts/AnyStakeRegulator.sol:AnyStakeRegulator",
        "label": "DeFiatToken",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 7488,
        "contract": "contracts/AnyStakeRegulator.sol:AnyStakeRegulator",
        "label": "DeFiatPoints",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 7490,
        "contract": "contracts/AnyStakeRegulator.sol:AnyStakeRegulator",
        "label": "DeFiatTokenLp",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 7492,
        "contract": "contracts/AnyStakeRegulator.sol:AnyStakeRegulator",
        "label": "DeFiatPointsLp",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 7496,
        "contract": "contracts/AnyStakeRegulator.sol:AnyStakeRegulator",
        "label": "_blacklistedAdminWithdraw",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1688,
        "contract": "contracts/AnyStakeRegulator.sol:AnyStakeRegulator",
        "label": "userInfo",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_struct(UserInfo)1684_storage)"
      },
      {
        "astId": 1690,
        "contract": "contracts/AnyStakeRegulator.sol:AnyStakeRegulator",
        "label": "migrator",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 1692,
        "contract": "contracts/AnyStakeRegulator.sol:AnyStakeRegulator",
        "label": "vault",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 1694,
        "contract": "contracts/AnyStakeRegulator.sol:AnyStakeRegulator",
        "label": "active",
        "offset": 20,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 1696,
        "contract": "contracts/AnyStakeRegulator.sol:AnyStakeRegulator",
        "label": "initialized",
        "offset": 21,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 1698,
        "contract": "contracts/AnyStakeRegulator.sol:AnyStakeRegulator",
        "label": "stakingFee",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1700,
        "contract": "contracts/AnyStakeRegulator.sol:AnyStakeRegulator",
        "label": "priceMultiplier",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 1702,
        "contract": "contracts/AnyStakeRegulator.sol:AnyStakeRegulator",
        "label": "lastRewardBlock",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 1704,
        "contract": "contracts/AnyStakeRegulator.sol:AnyStakeRegulator",
        "label": "buybackBalance",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 1706,
        "contract": "contracts/AnyStakeRegulator.sol:AnyStakeRegulator",
        "label": "buybackRate",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 1708,
        "contract": "contracts/AnyStakeRegulator.sol:AnyStakeRegulator",
        "label": "rewardsPerShare",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 1710,
        "contract": "contracts/AnyStakeRegulator.sol:AnyStakeRegulator",
        "label": "pendingRewards",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 1712,
        "contract": "contracts/AnyStakeRegulator.sol:AnyStakeRegulator",
        "label": "totalShares",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserInfo)1684_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AnyStakeRegulator.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)1684_storage"
      },
      "t_struct(UserInfo)1684_storage": {
        "encoding": "inplace",
        "label": "struct AnyStakeRegulator.UserInfo",
        "members": [
          {
            "astId": 1679,
            "contract": "contracts/AnyStakeRegulator.sol:AnyStakeRegulator",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1681,
            "contract": "contracts/AnyStakeRegulator.sol:AnyStakeRegulator",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1683,
            "contract": "contracts/AnyStakeRegulator.sol:AnyStakeRegulator",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}